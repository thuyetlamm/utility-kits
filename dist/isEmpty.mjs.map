{"version":3,"sources":["../src/checkTypes.ts","../src/isEmpty.ts"],"sourcesContent":["import { DATATYPE } from \"./types/common\"\n\nexport const checkType = <T>(value:T)  =>\n    Object.prototype.toString.call(value).slice(8, -1) as DATATYPE\n\nexport const isObject = <T>(value: T) => checkType(value) === DATATYPE.Object\nexport const isArray  = <T>(value: T) => checkType(value) === DATATYPE.Array\nexport const isNaN    = <T>(value: T) => checkType(value) === DATATYPE.NaN\nexport const isFunction = <T>(value: T) => checkType(value) === DATATYPE.Function\nexport const isNumber = <T>(value: T) => checkType(value) === DATATYPE.Number\nexport const isString = <T>(value: T) => checkType(value) === DATATYPE.String\nexport const isSymbol = <T>(value: T) => checkType(value) === DATATYPE.Symbol\nexport const isNull   = <T>(value: T) => checkType(value) === DATATYPE.Null\nexport const isUndefined   = <T>(value: T) => checkType(value) === DATATYPE.Undefined\n\nconst checkTypeInstance = {\n    isObject,\n    isArray,\n    isNaN,\n    isFunction,\n    checkType,\n    isString,\n    isNumber,\n    isSymbol,\n    isNull,\n    isUndefined\n}\nexport default checkTypeInstance\n\n","import { isArray, isString } from \"./checkTypes\";\n\nconst isEmpty = <T>(val: T) => {\n\n    if(!val) return true;\n\n    // Check for an empty array\n    if(isArray(val) && val instanceof Array) {\n        return !val.length;\n    }\n    // Check for an empty string or array\n\n    if (isString(val) && val instanceof String) return !(val.trim().length === 0)\n\n    // Check for an empty Map or Set\n\n    if(val instanceof Map || val instanceof Set) {\n        return !val.size\n    }\n\n    return !Object.keys(val ?? {}).length\n}\nexport default isEmpty\n"],"mappings":"AAEO,IAAMA,EAAgBC,GACzB,OAAO,UAAU,SAAS,KAAKA,CAAK,EAAE,MAAM,EAAG,EAAE,EAG9C,IAAMC,EAAeC,GAAaC,EAAUD,CAAK,IAAM,QAIvD,IAAME,EAAeC,GAAaC,EAAUD,CAAK,IAAM,SCR9D,IAAME,EAAcC,GAEZA,EAGDC,EAAQD,CAAG,GAAKA,aAAe,MACvB,CAACA,EAAI,OAIZE,EAASF,CAAG,GAAKA,aAAe,OAAiBA,EAAI,KAAK,EAAE,SAAW,EAIxEA,aAAe,KAAOA,aAAe,IAC7B,CAACA,EAAI,KAGT,CAAC,OAAO,KAAKA,GAAA,KAAAA,EAAO,CAAC,CAAC,EAAE,OAhBf,GAkBbG,EAAQJ","names":["checkType","value","isArray","value","checkType","isString","value","checkType","isEmpty","val","isArray","isString","isEmpty_default"]}