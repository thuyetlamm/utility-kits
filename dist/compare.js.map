{"version":3,"sources":["../src/compare.ts","../src/checkTypes.ts"],"sourcesContent":["import checkTypes from \"./checkTypes\"\n\nconst gte = (value: number, other: number) => {\n    const convertValue = Number(value)\n    const convertOther = Number(other)\n    if (checkTypes.isNaN(convertOther + convertValue)) throw \"Value is NaN\"\n    return convertValue >= convertOther\n}\n\nconst gt = (value: number, other: number) => {\n    const convertValue = Number(value)\n    const convertOther = Number(other)\n    if (checkTypes.isNaN(convertOther + convertValue)) throw \"Value is NaN\"\n    return convertValue > convertOther\n}\nconst lte = (value: number, other: number) => {\n    const convertValue = Number(value)\n    const convertOther = Number(other)\n    if (checkTypes.isNaN(convertOther + convertValue)) throw \"Value is NaN\"\n    return convertValue <= convertOther\n}\nconst lt = (value: number, other: number) => {\n    const convertValue = Number(value)\n    const convertOther = Number(other)\n    if (checkTypes.isNaN(convertOther + convertValue)) throw \"Value is NaN\"\n    return convertValue < convertOther\n}\n\nconst compareInstance = {\n    gte,\n    lt,\n    lte,\n    gt,\n}\n\nexport default compareInstance\n","import { DATATYPE } from \"./types/common\"\n\nconst checkType = (value: object | number | string) =>\n    Object.prototype.toString.call(value).slice(8, -1)\n\nconst isObject = (value: object) => checkType(value) === DATATYPE.Object\nconst isArray = (value: object) => checkType(value) === DATATYPE.Array\nconst isNaN = (value: number) => checkType(value) === DATATYPE.NaN\nconst isFunction = (value: object) => checkType(value) === DATATYPE.Function\nconst isNumber = (value: number) => checkType(value) === DATATYPE.Number\nconst isString= (value: string) => checkType(value) === DATATYPE.String\n\nconst checkTypeInstance = {\n    isObject,\n    isArray,\n    isNaN,\n    isFunction,\n    checkType,\n    isString,\n    isNumber\n}\nexport default checkTypeInstance\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACEA,IAAM,YAAY,CAAC,UACf,OAAO,UAAU,SAAS,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE;AAErD,IAAM,WAAW,CAAC,UAAkB,UAAU,KAAK;AACnD,IAAM,UAAU,CAAC,UAAkB,UAAU,KAAK;AAClD,IAAM,QAAQ,CAAC,UAAkB,UAAU,KAAK;AAChD,IAAM,aAAa,CAAC,UAAkB,UAAU,KAAK;AACrD,IAAM,WAAW,CAAC,UAAkB,UAAU,KAAK;AACnD,IAAM,WAAU,CAAC,UAAkB,UAAU,KAAK;AAElD,IAAM,oBAAoB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AACA,IAAO,qBAAQ;;;ADnBf,IAAM,MAAM,CAAC,OAAe,UAAkB;AAC1C,QAAM,eAAe,OAAO,KAAK;AACjC,QAAM,eAAe,OAAO,KAAK;AACjC,MAAI,mBAAW,MAAM,eAAe,YAAY,EAAG,OAAM;AACzD,SAAO,gBAAgB;AAC3B;AAEA,IAAM,KAAK,CAAC,OAAe,UAAkB;AACzC,QAAM,eAAe,OAAO,KAAK;AACjC,QAAM,eAAe,OAAO,KAAK;AACjC,MAAI,mBAAW,MAAM,eAAe,YAAY,EAAG,OAAM;AACzD,SAAO,eAAe;AAC1B;AACA,IAAM,MAAM,CAAC,OAAe,UAAkB;AAC1C,QAAM,eAAe,OAAO,KAAK;AACjC,QAAM,eAAe,OAAO,KAAK;AACjC,MAAI,mBAAW,MAAM,eAAe,YAAY,EAAG,OAAM;AACzD,SAAO,gBAAgB;AAC3B;AACA,IAAM,KAAK,CAAC,OAAe,UAAkB;AACzC,QAAM,eAAe,OAAO,KAAK;AACjC,QAAM,eAAe,OAAO,KAAK;AACjC,MAAI,mBAAW,MAAM,eAAe,YAAY,EAAG,OAAM;AACzD,SAAO,eAAe;AAC1B;AAEA,IAAM,kBAAkB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAEA,IAAO,kBAAQ;","names":[]}