{"version":3,"sources":["../src/index.ts","../src/get.ts","../src/checkTypes.ts","../src/deepClone.ts","../src/isEmpty.ts","../src/merge.ts"],"sourcesContent":["export  { default as get } from './get'\nexport  { default as checkTypes  } from './checkTypes'\nexport  { default as deepClone  } from './deepClone'\nexport  { default as isEmpty  } from './isEmpty'\nexport  { default as merge  } from './merge'","type NestedKeyOf<ObjectType extends object> = {\n    [Key in keyof ObjectType & (string | number)]: ObjectType[Key] extends object\n        ? `${Key}` | `${Key}.${NestedKeyOf<ObjectType[Key]>}`\n        : `${Key}`\n}[keyof ObjectType & (string | number)]\n\ntype NestedKeyValue<\n    T extends object,\n    Key,\n> = Key extends `${infer First}.${infer Rest}`\n    ? First extends keyof T\n        ? T[First] extends object\n            ? Rest extends NestedKeyOf<T[First]>\n                ? NestedKeyValue<T[First], Rest>\n                : never\n            : never\n        : never\n    : Key extends keyof T\n        ? T[Key]\n        : never\n\n const get = <T extends object, K extends NestedKeyOf<T>>(\n    obj: T,\n    key: K,\n    defaultValue?: NestedKeyValue<T, K>,\n): NestedKeyValue<T, K> => {\n    if (!obj || !key) return undefined as NestedKeyValue<T, K>\n\n    const keyParts = key.split(\".\") as Array<keyof T>\n    let value = { ...obj }\n\n    for (const part of keyParts) {\n        value = (value as Record<keyof T, T>)?.[part as keyof T]\n        if (value === undefined) {\n            break\n        }\n    }\n    return (value || defaultValue) as NestedKeyValue<T, K>\n}\n\nexport default get\n","import { DATATYPE } from \"./types/common\"\n\nconst checkType = (value: unknown) =>\n    Object.prototype.toString.call(value).slice(8, -1)\n\nconst isObject = (value: unknown) => checkType(value) === DATATYPE.Object\nconst isArray = (value: unknown) => checkType(value) === DATATYPE.Array\nconst isNaN = (value: unknown) => checkType(value) === DATATYPE.NaN\nconst isFunction = (value: unknown) => checkType(value) === DATATYPE.Function\n\nconst checkTypeInstance = {\n    isObject,\n    isArray,\n    isNaN,\n    isFunction,\n    checkType,\n}\nexport default checkTypeInstance\n","const deepClone = <T>(obj: T): T => {\n    // Check if the value is null or not an object\n    if (obj === null || typeof obj !== \"object\") {\n        return obj\n    }\n\n    // Handle arrays\n    if (Array.isArray(obj)) {\n        const copy = []\n        for (let i = 0; i < obj.length; i++) {\n            copy[i] = deepClone(obj[i])\n        }\n        return copy as T\n    }\n\n    // Handle objects\n    if (obj instanceof Object) {\n        const copy = {} as T\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                copy[key as keyof T] = deepClone(obj[key])\n            }\n        }\n        return copy as T\n    }\n\n    throw new Error(\"Unable to copy object! Its type isn't supported.\")\n}\nexport default deepClone\n","const isEmpty = <T>(obj: T) => {\n    // Check for an empty string\n    if (typeof obj === \"string\" && obj.trim().length === 0) return true\n    return !Object.keys(obj ?? {}).length\n}\nexport default isEmpty\n","import deepClone  from \"./deepClone\"\n\ntype MergeableObject<T> = T extends object ? T : never\n\nconst merge = <T extends object>(target: T, source: T) => {\n    if (!target || !source) return target ?? source\n\n    const clonedTarget = deepClone(target)\n    const clonedSource = deepClone(source)\n\n    if (Array.isArray(clonedTarget) && Array.isArray(clonedSource)) {\n        return [...clonedTarget, ...clonedSource] as T\n    }\n\n    if (typeof target === \"object\" && typeof source === \"object\") {\n        const result: T = { ...clonedTarget } as T\n        for (const key in source) {\n            if (source.hasOwnProperty(key)) {\n                const targetValue = clonedTarget[key] // Store target value for potential recursion\n                const sourceValue = clonedSource[key]\n                if (clonedSource[key] instanceof Object && key in clonedTarget) {\n                    result[key] = merge(\n                        targetValue as MergeableObject<typeof targetValue>,\n                        sourceValue as MergeableObject<typeof sourceValue>,\n                    )\n                } else {\n                    result[key] = sourceValue\n                }\n            }\n        }\n        return result\n    }\n\n    throw new Error(\"Both target and source should be either objects or arrays\")\n}\n\nexport default merge\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACqBC,IAAM,MAAM,CACT,KACA,KACA,iBACuB;AACvB,MAAI,CAAC,OAAO,CAAC,IAAK,QAAO;AAEzB,QAAM,WAAW,IAAI,MAAM,GAAG;AAC9B,MAAI,QAAQ,mBAAK;AAEjB,aAAW,QAAQ,UAAU;AACzB,YAAS,+BAA+B;AACxC,QAAI,UAAU,QAAW;AACrB;AAAA,IACJ;AAAA,EACJ;AACA,SAAQ,SAAS;AACrB;AAEA,IAAO,cAAQ;;;ACtCf,IAAM,YAAY,CAAC,UACf,OAAO,UAAU,SAAS,KAAK,KAAK,EAAE,MAAM,GAAG,EAAE;AAErD,IAAM,WAAW,CAAC,UAAmB,UAAU,KAAK;AACpD,IAAM,UAAU,CAAC,UAAmB,UAAU,KAAK;AACnD,IAAM,QAAQ,CAAC,UAAmB,UAAU,KAAK;AACjD,IAAM,aAAa,CAAC,UAAmB,UAAU,KAAK;AAEtD,IAAM,oBAAoB;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AACA,IAAO,qBAAQ;;;ACjBf,IAAM,YAAY,CAAI,QAAc;AAEhC,MAAI,QAAQ,QAAQ,OAAO,QAAQ,UAAU;AACzC,WAAO;AAAA,EACX;AAGA,MAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,UAAM,OAAO,CAAC;AACd,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,WAAK,CAAC,IAAI,UAAU,IAAI,CAAC,CAAC;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAGA,MAAI,eAAe,QAAQ;AACvB,UAAM,OAAO,CAAC;AACd,eAAW,OAAO,KAAK;AACnB,UAAI,IAAI,eAAe,GAAG,GAAG;AACzB,aAAK,GAAc,IAAI,UAAU,IAAI,GAAG,CAAC;AAAA,MAC7C;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAEA,QAAM,IAAI,MAAM,kDAAkD;AACtE;AACA,IAAO,oBAAQ;;;AC5Bf,IAAM,UAAU,CAAI,QAAW;AAE3B,MAAI,OAAO,QAAQ,YAAY,IAAI,KAAK,EAAE,WAAW,EAAG,QAAO;AAC/D,SAAO,CAAC,OAAO,KAAK,oBAAO,CAAC,CAAC,EAAE;AACnC;AACA,IAAO,kBAAQ;;;ACDf,IAAM,QAAQ,CAAmB,QAAW,WAAc;AACtD,MAAI,CAAC,UAAU,CAAC,OAAQ,QAAO,0BAAU;AAEzC,QAAM,eAAe,kBAAU,MAAM;AACrC,QAAM,eAAe,kBAAU,MAAM;AAErC,MAAI,MAAM,QAAQ,YAAY,KAAK,MAAM,QAAQ,YAAY,GAAG;AAC5D,WAAO,CAAC,GAAG,cAAc,GAAG,YAAY;AAAA,EAC5C;AAEA,MAAI,OAAO,WAAW,YAAY,OAAO,WAAW,UAAU;AAC1D,UAAM,SAAY,mBAAK;AACvB,eAAW,OAAO,QAAQ;AACtB,UAAI,OAAO,eAAe,GAAG,GAAG;AAC5B,cAAM,cAAc,aAAa,GAAG;AACpC,cAAM,cAAc,aAAa,GAAG;AACpC,YAAI,aAAa,GAAG,aAAa,UAAU,OAAO,cAAc;AAC5D,iBAAO,GAAG,IAAI;AAAA,YACV;AAAA,YACA;AAAA,UACJ;AAAA,QACJ,OAAO;AACH,iBAAO,GAAG,IAAI;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAEA,QAAM,IAAI,MAAM,2DAA2D;AAC/E;AAEA,IAAO,gBAAQ;","names":[]}