{"version":3,"sources":["../src/get.ts"],"sourcesContent":["import { NestedKeyOf, NestedKeyValue } from \"./types/get\";\n\n\nconst get = <T extends object, K extends NestedKeyOf<T> = NestedKeyOf<T>>(\n    obj: T,\n    key: K,\n    defaultValue?: NestedKeyValue<T, K>,\n):  NestedKeyValue<T, K> => {\n    if (!obj || !key) return undefined as NestedKeyValue<T, K>\n\n\n    const keyParts = key.split(\".\") as Array<keyof T>\n    let value = { ...obj }\n\n    for (const part of keyParts) {\n        value = (value as Record<keyof T, T>)?.[part as keyof T]\n        if (value === undefined) {\n            break\n        }\n    }\n    return (value || defaultValue) as NestedKeyValue<T, K>\n}\n\nexport default get\n\n"],"mappings":"yVAGA,IAAMA,EAAM,CACRC,EACAC,EACAC,IACwB,CACxB,GAAI,CAACF,GAAO,CAACC,EAAK,OAGlB,IAAME,EAAWF,EAAI,MAAM,GAAG,EAC1BG,EAAQC,EAAA,GAAKL,GAEjB,QAAWM,KAAQH,EAEf,GADAC,EAASA,GAAA,YAAAA,EAA+BE,GACpCF,IAAU,OACV,MAGR,OAAQA,GAASF,CACrB,EAEOK,EAAQR","names":["get","obj","key","defaultValue","keyParts","value","__spreadValues","part","get_default"]}