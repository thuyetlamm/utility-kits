{"version":3,"sources":["../src/checkTypes.ts","../src/compare.ts"],"sourcesContent":["import { DATATYPE } from \"./types/common\"\n\nexport const checkType = <T>(value:T)  =>\n    Object.prototype.toString.call(value).slice(8, -1) as DATATYPE\n\nexport const isObject = <T>(value: T) => checkType(value) === DATATYPE.Object\nexport const isArray  = <T>(value: T) => checkType(value) === DATATYPE.Array\nexport const isNaN    = <T>(value: T) => checkType(value) === DATATYPE.NaN\nexport const isFunction = <T>(value: T) => checkType(value) === DATATYPE.Function\nexport const isNumber = <T>(value: T) => checkType(value) === DATATYPE.Number\nexport const isString = <T>(value: T) => checkType(value) === DATATYPE.String\nexport const isSymbol = <T>(value: T) => checkType(value) === DATATYPE.Symbol\nexport const isNull   = <T>(value: T) => checkType(value) === DATATYPE.Null\nexport const isUndefined   = <T>(value: T) => checkType(value) === DATATYPE.Undefined\n\nconst checkTypeInstance = {\n    isObject,\n    isArray,\n    isNaN,\n    isFunction,\n    checkType,\n    isString,\n    isNumber,\n    isSymbol,\n    isNull,\n    isUndefined\n}\nexport default checkTypeInstance\n\n","import checkTypes from \"./checkTypes\"\n\nconst gte = (value: number, other: number) => {\n    const convertValue = Number(value)\n    const convertOther = Number(other)\n    if (checkTypes.isNaN(convertOther + convertValue)) throw \"Value is NaN\"\n    return convertValue >= convertOther\n}\n\nconst gt = (value: number, other: number) => {\n    const convertValue = Number(value)\n    const convertOther = Number(other)\n    if (checkTypes.isNaN(convertOther + convertValue)) throw \"Value is NaN\"\n    return convertValue > convertOther\n}\nconst lte = (value: number, other: number) => {\n    const convertValue = Number(value)\n    const convertOther = Number(other)\n    if (checkTypes.isNaN(convertOther + convertValue)) throw \"Value is NaN\"\n    return convertValue <= convertOther\n}\nconst lt = (value: number, other: number) => {\n    const convertValue = Number(value)\n    const convertOther = Number(other)\n    if (checkTypes.isNaN(convertOther + convertValue)) throw \"Value is NaN\"\n    return convertValue < convertOther\n}\n\nconst compareInstance = {\n    gte,\n    lt,\n    lte,\n    gt,\n}\n\nexport default compareInstance\n"],"mappings":"AAEO,IAAMA,EAAgBC,GACzB,OAAO,UAAU,SAAS,KAAKA,CAAK,EAAE,MAAM,EAAG,EAAE,EAExCC,EAAeD,GAAaD,EAAUC,CAAK,IAAM,SACjDE,EAAeF,GAAaD,EAAUC,CAAK,IAAM,QACjDG,EAAeH,GAAaD,EAAUC,CAAK,IAAM,MACjDI,EAAiBJ,GAAaD,EAAUC,CAAK,IAAM,WACnDK,EAAeL,GAAaD,EAAUC,CAAK,IAAM,SACjDM,EAAeN,GAAaD,EAAUC,CAAK,IAAM,SACjDO,EAAeP,GAAaD,EAAUC,CAAK,IAAM,SACjDQ,EAAeR,GAAaD,EAAUC,CAAK,IAAM,OACjDS,EAAoBT,GAAaD,EAAUC,CAAK,IAAM,YAE7DU,EAAoB,CACtB,SAAAT,EACA,QAAAC,EACA,MAAAC,EACA,WAAAC,EACA,UAAAL,EACA,SAAAO,EACA,SAAAD,EACA,SAAAE,EACA,OAAAC,EACA,YAAAC,CACJ,EACOE,EAAQD,ECzBf,IAAME,EAAM,CAACC,EAAeC,IAAkB,CAC1C,IAAMC,EAAe,OAAOF,CAAK,EAC3BG,EAAe,OAAOF,CAAK,EACjC,GAAIG,EAAW,MAAMD,EAAeD,CAAY,EAAG,KAAM,eACzD,OAAOA,GAAgBC,CAC3B,EAEME,EAAK,CAACL,EAAeC,IAAkB,CACzC,IAAMC,EAAe,OAAOF,CAAK,EAC3BG,EAAe,OAAOF,CAAK,EACjC,GAAIG,EAAW,MAAMD,EAAeD,CAAY,EAAG,KAAM,eACzD,OAAOA,EAAeC,CAC1B,EACMG,EAAM,CAACN,EAAeC,IAAkB,CAC1C,IAAMC,EAAe,OAAOF,CAAK,EAC3BG,EAAe,OAAOF,CAAK,EACjC,GAAIG,EAAW,MAAMD,EAAeD,CAAY,EAAG,KAAM,eACzD,OAAOA,GAAgBC,CAC3B,EACMI,EAAK,CAACP,EAAeC,IAAkB,CACzC,IAAMC,EAAe,OAAOF,CAAK,EAC3BG,EAAe,OAAOF,CAAK,EACjC,GAAIG,EAAW,MAAMD,EAAeD,CAAY,EAAG,KAAM,eACzD,OAAOA,EAAeC,CAC1B,EAEMK,EAAkB,CACpB,IAAAT,EACA,GAAAQ,EACA,IAAAD,EACA,GAAAD,CACJ,EAEOI,EAAQD","names":["checkType","value","isObject","isArray","isNaN","isFunction","isNumber","isString","isSymbol","isNull","isUndefined","checkTypeInstance","checkTypes_default","gte","value","other","convertValue","convertOther","checkTypes_default","gt","lte","lt","compareInstance","compare_default"]}