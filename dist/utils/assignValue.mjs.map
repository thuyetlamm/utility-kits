{"version":3,"sources":["../../src/utils/assignValue.ts"],"sourcesContent":["\n/** Used to check objects for own properties. */\nconst hasOwnProperty = Object.prototype.hasOwnProperty\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent.\n */\n\nfunction baseAssignValue<T extends object,K extends keyof T>(object : T, key:K, value: T[K]) {\n    if (key === '__proto__') {\n        Object.defineProperty(object, key, {\n            'configurable': true,\n            'enumerable': true,\n            'value': value,\n            'writable': true\n        })\n    } else {\n        object[key] = value\n    }\n}\n\nfunction eq<T>(value :T, other :T) {\n    return value === other || (value !== value && other !== other);\n}\n\n\nfunction assignValue<T extends object,K extends keyof T>(object :T, key : K, value : T[K]) {\n    const objValue = object[key]\n\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value))) {\n        if (value !== 0 || (1 / Number(value)) === (1 / Number(objValue))) {\n            baseAssignValue(object, key, value)\n        }\n    } else if (value === undefined && !(key in object)) {\n        baseAssignValue(object, key, value)\n    }\n}\n\nexport default assignValue"],"mappings":";AAEA,IAAM,iBAAiB,OAAO,UAAU;AAMxC,SAAS,gBAAoD,QAAY,KAAO,OAAa;AACzF,MAAI,QAAQ,aAAa;AACrB,WAAO,eAAe,QAAQ,KAAK;AAAA,MAC/B,gBAAgB;AAAA,MAChB,cAAc;AAAA,MACd,SAAS;AAAA,MACT,YAAY;AAAA,IAChB,CAAC;AAAA,EACL,OAAO;AACH,WAAO,GAAG,IAAI;AAAA,EAClB;AACJ;AAEA,SAAS,GAAM,OAAU,OAAU;AAC/B,SAAO,UAAU,SAAU,UAAU,SAAS,UAAU;AAC5D;AAGA,SAAS,YAAgD,QAAW,KAAS,OAAc;AACvF,QAAM,WAAW,OAAO,GAAG;AAE3B,MAAI,EAAE,eAAe,KAAK,QAAQ,GAAG,KAAK,GAAG,UAAU,KAAK,IAAI;AAC5D,QAAI,UAAU,KAAM,IAAI,OAAO,KAAK,MAAQ,IAAI,OAAO,QAAQ,GAAI;AAC/D,sBAAgB,QAAQ,KAAK,KAAK;AAAA,IACtC;AAAA,EACJ,WAAW,UAAU,UAAa,EAAE,OAAO,SAAS;AAChD,oBAAgB,QAAQ,KAAK,KAAK;AAAA,EACtC;AACJ;AAEA,IAAO,sBAAQ;","names":[]}