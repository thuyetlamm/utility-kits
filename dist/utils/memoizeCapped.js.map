{"version":3,"sources":["../../src/utils/memoizeCapped.ts","../../src/checkTypes.ts","../../src/components/Show/Show.tsx","../../src/components/Each/Each.tsx","../../src/utils/stringToPath.ts","../../src/utils/baseSet.ts","../../src/utils/memoize.ts"],"sourcesContent":["import memoize, {MemFunction, TFunction, TKey} from \"./memoize\";\n\n/** Used as the maximum memoize cache size. */\nconst MAX_MEMOIZE_SIZE = 500\n\n/**\n * A specialized version of `memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n */\nconst memoizeCapped = <T extends MemFunction>(func: TFunction) : T => {\n    const result = memoize(func, (...key : TKey) : string[] => {\n        const { cache } = result\n        if (cache?.size === MAX_MEMOIZE_SIZE) {\n            cache?.clear()\n        }\n        return key\n    }) as T\n\n    return result\n}\n\nexport default memoizeCapped","import { DATATYPE } from \"./types/common\"\n\nconst checkType = <T>(value:T)  =>\n    Object.prototype.toString.call(value).slice(8, -1) as DATATYPE\n\nconst isObject = <T>(value: T) => checkType(value) === DATATYPE.Object\nconst isArray  = <T>(value: T) => checkType(value) === DATATYPE.Array\nconst isNaN    = <T>(value: T) => checkType(value) === DATATYPE.NaN\nconst isFunction = <T>(value: T) => checkType(value) === DATATYPE.Function\nconst isNumber = <T>(value: T) => checkType(value) === DATATYPE.Number\nconst isString = <T>(value: T) => checkType(value) === DATATYPE.String\nconst isSymbol = <T>(value: T) => checkType(value) === DATATYPE.Symbol\nconst isNull   = <T>(value: T) => checkType(value) === DATATYPE.Null\nconst isUndefined   = <T>(value: T) => checkType(value) === DATATYPE.Undefined\n\nconst checkTypeInstance = {\n    isObject,\n    isArray,\n    isNaN,\n    isFunction,\n    checkType,\n    isString,\n    isNumber,\n    isSymbol,\n    isNull,\n    isUndefined\n}\nexport default checkTypeInstance\n\n","import { Children, isValidElement, PropsWithChildren, ReactElement, ReactNode } from 'react'\nimport {Nullable} from \"../../types/common\";\n\n\ninterface ShowProps {}\n\ninterface ChildProps {\n    isTrue?: boolean\n}\n\nconst Show = ({ children }: PropsWithChildren<ShowProps>) => {\n    let when: Nullable<ReactElement<ChildProps>> = null\n    let otherwise: Nullable<ReactElement<ChildProps>> = null\n\n    Children.forEach(children, (child) => {\n        if (!isValidElement<ChildProps>(child)) return\n\n        if (!child.props.isTrue) {\n            otherwise = child\n        } else if (child.props.isTrue && !when) {\n            when = child\n        }\n    })\n\n    return when || otherwise\n}\n\nShow.When = ({ children, isTrue }: PropsWithChildren<ChildProps>) => {\n    return isTrue && children\n}\nShow.Else = ({\n                 children,\n                 render\n             }: PropsWithChildren<\n    ChildProps & {\n    render?: ReactNode\n}\n>) => {\n    return render || children\n}\n\nexport default Show","import React, { Children, Fragment } from 'react'\nimport Show from \"../Show/Show\";\n\ninterface EachProps<T> {\n    list: T[] | readonly T[];\n    render: (item: T, index: number) => React.ReactNode\n    empty?: React.ReactNode\n}\n\nconst Each = <T,>({ list, render, empty }: EachProps<T>) => {\n    return (\n        <Fragment>\n            {\n                <Show>\n                    <Show.When isTrue={Array.isArray(list) && list.length > 0}>{Children.toArray(list.map(render))}</Show.When>\n                    <Show.Else>{empty}</Show.Else>\n                </Show>\n            }\n        </Fragment>\n    )\n}\n\nexport default Each\n\n\n","import memoizeCapped from './memoizeCapped'\nimport {checkTypes} from \"../index\";\n\nconst charCodeOfDot = '.'.charCodeAt(0)\nconst reEscapeChar = /\\\\(\\\\)?/g\nconst rePropName = RegExp(\n    // Match anything that isn't a dot or bracket.\n    '[^.[\\\\]]+' + '|' +\n    // Or match property names within brackets.\n    '\\\\[(?:' +\n    // Match a non-string expression.\n    '([^\"\\'][^[]*)' + '|' +\n    // Or match strings (supports escaping characters).\n    '([\"\\'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2' +\n    ')\\\\]'+ '|' +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    '(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))'\n    , 'g')\n\nconst stringToPath = memoizeCapped((str?: string | string[]) : string[]  => {\n    const result : string[] = []\n    if(!checkTypes.isString(str)) return result\n    if ((str as string)?.charCodeAt(0) === charCodeOfDot) {\n        result.push('')\n    }\n    (str as string)?.replace(rePropName, (match: string, expression?: string, quote?: string, subString?: string) : any   => {\n        let key = match\n        if (quote) {\n            key = subString?.replace(reEscapeChar, '$1') ?? ''\n        }\n        else if (expression) {\n            key = expression.trim()\n        }\n        result.push(key)\n    })\n    return result\n})\n\nexport default stringToPath","import castPath from \"./cashPath\";\nimport {checkTypes} from \"../index\";\nimport isIndex from \"./isIndex\";\nimport assignValue from \"./assignValue\";\nimport {DATATYPE} from \"../types/common\";\nimport {NestedKeyOf, NestedKeyValue} from \"../types/get\";\n\n\nconst INFINITY = 1 / 0\n\nfunction toKey<T>(value : T) {\n    if ([DATATYPE.Symbol,DATATYPE.String].includes(checkTypes.checkType(value))) {\n        return value\n    }\n    const result = `${value}`\n    return (result === '0' && (1 / Number(value)) === -INFINITY) ? '-0' : result\n}\n\n\nfunction baseSet<T extends object,K extends NestedKeyOf<T>>(object : T, path : K, value : NestedKeyValue<T, K>) {\n    if (!checkTypes.isObject(object)) {\n        return object\n    }\n    path = castPath(path as any, object)\n\n    const length = path.length\n    const lastIndex = length - 1\n\n    let index = -1\n    let nested = object\n\n    while (nested != null && ++index < length) {\n        const key = toKey(path[index])\n        let newValue = value\n\n        if (index !== lastIndex) {\n            const objValue = nested[key as keyof T]\n                newValue = checkTypes.isObject(objValue)\n                    ? objValue as NestedKeyValue<T, K>\n                    : (isIndex(path[index + 1]) ? [] : {}) as NestedKeyValue<T, K>\n\n        }\n        assignValue(nested, key as any, newValue)\n        nested = nested[key as keyof T] as T\n    }\n    return object\n}\n\nexport default baseSet","import {checkTypes} from \"../index\";\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n*/\nexport type TKey =  [key?: TKey, ...rest: any[]]\nexport type TFunction = (...args:  TKey) => string[]\nexport type MemFunction = TFunction & {\n    cache? :Map<any,any>\n};\n\nconst memoize = (func:TFunction, resolver :TFunction) => {\n    if (!checkTypes.isFunction(func) || !checkTypes.isFunction(resolver)) {\n        throw new TypeError('Expected a function');\n    }\n    const memoized = (...args: TKey) => {\n        const key = resolver ? resolver.apply(null, args) : args[0];\n        const cache = memoized.cache as Map<any,any>;\n\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        const result = func.apply(null, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n    };\n    memoized.cache = new (memoize.Cache || Map)();\n    return memoized;\n}\n\nmemoize.Cache = Map;\n\nexport default memoize;"],"mappings":"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","names":["import_react"]}