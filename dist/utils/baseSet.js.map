{"version":3,"sources":["../../src/utils/baseSet.ts","../../src/checkTypes.ts","../../src/utils/isKey.ts","../../src/utils/memoize.ts","../../src/utils/memoizeCapped.ts","../../src/utils/stringToPath.ts","../../src/utils/cashPath.ts","../../src/utils/isIndex.ts","../../src/utils/assignValue.ts"],"sourcesContent":["import castPath from \"./cashPath\";\nimport isIndex from \"./isIndex\";\nimport assignValue from \"./assignValue\";\nimport {DATATYPE} from \"../types/common\";\nimport {NestedKeyOf, NestedKeyValue} from \"../types/get\";\nimport { checkType, isNull, isObject } from \"../checkTypes\";\n\n\nconst INFINITY = 1 / 0\n\nfunction toKey<T>(value : T) {\n    if ([DATATYPE.Symbol,DATATYPE.String].includes(checkType(value))) {\n        return value\n    }\n    const result = `${value}`\n    return (result === '0' && (1 / Number(value)) === -INFINITY) ? '-0' : result\n}\n\n\nfunction baseSet<T extends object,K extends NestedKeyOf<T>>(object : T, path : K, value : NestedKeyValue<T, K>) {\n    if (!isObject(object)) {\n        return object\n    }\n    path = castPath(path as any, object)\n       const length = path.length\n    const lastIndex = length - 1\n\n    let index = -1\n    let nested = object\n\n    while (!isNull(nested) && ++index < length) {\n        const key = toKey(path[index]) as keyof T\n\n        let newValue = value as  T[keyof T]\n\n        if (index !== lastIndex) {\n            const objValue = nested[key]\n                newValue = isObject(objValue)\n                    ? objValue as T[keyof T]\n                    : (isIndex(path[index + 1]) ? [] : {}) as T[keyof T]\n\n        }\n        assignValue(nested, key as keyof T, newValue)\n        nested = nested[key] as T\n    }\n    return object\n}\n\nexport default baseSet","import { DATATYPE } from \"./types/common\"\n\nexport const checkType = <T>(value:T)  =>\n    Object.prototype.toString.call(value).slice(8, -1) as DATATYPE\n\nexport const isObject = <T>(value: T) => checkType(value) === DATATYPE.Object\nexport const isArray  = <T>(value: T) => checkType(value) === DATATYPE.Array\nexport const isNaN    = <T>(value: T) => checkType(value) === DATATYPE.NaN\nexport const isFunction = <T>(value: T) => checkType(value) === DATATYPE.Function\nexport const isNumber = <T>(value: T) => checkType(value) === DATATYPE.Number\nexport const isString = <T>(value: T) => checkType(value) === DATATYPE.String\nexport const isSymbol = <T>(value: T) => checkType(value) === DATATYPE.Symbol\nexport const isNull   = <T>(value: T) => checkType(value) === DATATYPE.Null\nexport const isUndefined   = <T>(value: T) => checkType(value) === DATATYPE.Undefined\n\nconst checkTypeInstance = {\n    isObject,\n    isArray,\n    isNaN,\n    isFunction,\n    checkType,\n    isString,\n    isNumber,\n    isSymbol,\n    isNull,\n    isUndefined\n}\nexport default checkTypeInstance\n\n","import {DATATYPE} from \"../types/common\";\nimport { checkType } from \"../checkTypes\";\n\n/** Used to match property names within property paths. */\nconst reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/\nconst reIsPlainProp = /^\\w*$/\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n */\nconst isKey = <T extends string>(value :T, object : object): boolean => {\n    if (Array.isArray(value)) {\n        return false\n    }\n\n    if([DATATYPE.Number,DATATYPE.Boolean,DATATYPE.Null,DATATYPE.Symbol].includes(checkType(value))) {\n        return true\n    }\n    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n        (object != null && value in Object(object))\n}\n\nexport default isKey","import { isFunction } from \"../checkTypes\";\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n*/\nexport type TKey =  [key?: TKey, ...rest: any[]]\nexport type TFunction = (...args:  TKey) => string[]\nexport type MemFunction = TFunction & {\n    cache? :Map<any,any>\n};\n\nconst memoize = (func:TFunction, resolver :TFunction) => {\n    if (!isFunction(func) || !isFunction(resolver)) {\n        throw new TypeError('Expected a function');\n    }\n    const memoized = (...args: TKey) => {\n        const key = resolver ? resolver.apply(null, args) : args[0];\n        const cache = memoized.cache as Map<any,any>;\n\n        if (cache.has(key)) {\n            return cache.get(key);\n        }\n        const result = func.apply(null, args);\n        memoized.cache = cache.set(key, result) || cache;\n        return result;\n    };\n    memoized.cache = new (memoize.Cache || Map)();\n    return memoized;\n}\n\nmemoize.Cache = Map;\n\nexport default memoize;","import memoize, {MemFunction, TFunction, TKey} from \"./memoize\";\n\n/** Used as the maximum memoize cache size. */\nconst MAX_MEMOIZE_SIZE = 500\n\n/**\n * A specialized version of `memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n */\nconst memoizeCapped = <T extends MemFunction>(func: TFunction) : T => {\n    const result = memoize(func, (...key : TKey) : string[] => {\n        const { cache } = result\n        if (cache?.size === MAX_MEMOIZE_SIZE) {\n            cache?.clear()\n        }\n        return key\n    }) as T\n\n    return result\n}\n\nexport default memoizeCapped","import memoizeCapped from './memoizeCapped'\nimport { isString } from \"../checkTypes\";\n\nconst charCodeOfDot = '.'.charCodeAt(0)\nconst reEscapeChar = /\\\\(\\\\)?/g\nconst rePropName = RegExp(\n    // Match anything that isn't a dot or bracket.\n    '[^.[\\\\]]+' + '|' +\n    // Or match property names within brackets.\n    '\\\\[(?:' +\n    // Match a non-string expression.\n    '([^\"\\'][^[]*)' + '|' +\n    // Or match strings (supports escaping characters).\n    '([\"\\'])((?:(?!\\\\2)[^\\\\\\\\]|\\\\\\\\.)*?)\\\\2' +\n    ')\\\\]'+ '|' +\n    // Or match \"\" as the space between consecutive dots or empty brackets.\n    '(?=(?:\\\\.|\\\\[\\\\])(?:\\\\.|\\\\[\\\\]|$))'\n    , 'g')\n\nconst stringToPath = memoizeCapped((str?: string | string[]) : string[]  => {\n    const result : string[] = []\n    if(!isString(str)) return result\n    if ((str as string)?.charCodeAt(0) === charCodeOfDot) {\n        result.push('')\n    }\n    (str as string)?.replace(rePropName, (match: string, expression?: string, quote?: string, subString?: string) : any   => {\n        let key = match\n        if (quote) {\n            key = subString?.replace(reEscapeChar, '$1') ?? ''\n        }\n        else if (expression) {\n            key = expression.trim()\n        }\n        result.push(key)\n    })\n    return result\n})\n\nexport default stringToPath","import isKey from \"./isKey\";\nimport stringToPath from \"./stringToPath\";\nimport { TKey } from \"./memoize\";\n\ntype ReturnCashPath<T> = T | T[]\n\nfunction castPath<T extends TKey>(value :T, object : object) : ReturnCashPath<T> {\n    if (Array.isArray(value)) {\n        return value\n    }\n    return isKey(value, object) ? [value] : stringToPath(value) as ReturnCashPath<T>\n}\n\nexport default castPath","import { isNumber, isSymbol } from \"../checkTypes\";\n\n/** Used as references for various `Number` constants. */\nconst MAX_SAFE_INTEGER = 9007199254740991\n\n/** Used to detect unsigned integer values. */\nconst reIsUint = /^(?:0|[1-9]\\d*)$/\n\n\nfunction isIndex<T extends string | symbol | number>(value :T, length : number = MAX_SAFE_INTEGER) : boolean {\n\n    return !!length &&\n        (isNumber(value as number) ||\n            (!isSymbol(value as string) && reIsUint.test(value as string))) &&\n        (Number(value) > -1 && Number(value) % 1 === 0 && Number(value) < length)\n}\n\n\nexport default isIndex","\n/** Used to check objects for own properties. */\nconst hasOwnProperty = Object.prototype.hasOwnProperty\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent.\n */\n\nfunction baseAssignValue<T extends object,K extends keyof T>(object : T, key:K, value: T[K]) {\n    if (key === '__proto__') {\n        Object.defineProperty(object, key, {\n            'configurable': true,\n            'enumerable': true,\n            'value': value,\n            'writable': true\n        })\n    } else {\n        object[key] = value\n    }\n}\n\nfunction eq<T>(value :T, other :T) {\n    return value === other || (value !== value && other !== other);\n}\n\n\nfunction assignValue<T extends object,K extends keyof T>(object :T, key : K, value : T[K]) {\n    const objValue = object[key]\n\n    if (!(hasOwnProperty.call(object, key) && eq(objValue, value))) {\n        if (value !== 0 || (1 / Number(value)) === (1 / Number(objValue))) {\n            baseAssignValue(object, key, value)\n        }\n    } else if (value === undefined && !(key in object)) {\n        baseAssignValue(object, key, value)\n    }\n}\n\nexport default assignValue"],"mappings":"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","names":["baseSet_exports","__export","baseSet_default","__toCommonJS","checkType","value","isObject","isFunction","value","checkType","isNumber","isString","isSymbol","isNull","reIsDeepProp","reIsPlainProp","isKey","value","object","checkType","isKey_default","memoize","func","resolver","isFunction","memoized","args","key","cache","result","memoize_default","MAX_MEMOIZE_SIZE","memoizeCapped","func","result","memoize_default","key","cache","memoizeCapped_default","charCodeOfDot","reEscapeChar","rePropName","stringToPath","memoizeCapped_default","str","result","isString","match","expression","quote","subString","_a","key","stringToPath_default","castPath","value","object","isKey_default","stringToPath_default","cashPath_default","MAX_SAFE_INTEGER","reIsUint","isIndex","value","length","isNumber","isSymbol","isIndex_default","hasOwnProperty","baseAssignValue","object","key","value","eq","other","assignValue","objValue","assignValue_default","INFINITY","toKey","value","checkType","result","baseSet","object","path","isObject","cashPath_default","length","lastIndex","index","nested","isNull","key","newValue","objValue","isIndex_default","assignValue_default","baseSet_default"]}