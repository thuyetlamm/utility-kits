{"version":3,"sources":["../../src/utils/isIndex.ts","../../src/checkTypes.ts"],"sourcesContent":["import { isNumber, isSymbol } from \"../checkTypes\";\n\n/** Used as references for various `Number` constants. */\nconst MAX_SAFE_INTEGER = 9007199254740991\n\n/** Used to detect unsigned integer values. */\nconst reIsUint = /^(?:0|[1-9]\\d*)$/\n\n\nfunction isIndex<T extends string | symbol | number>(value :T, length : number = MAX_SAFE_INTEGER) : boolean {\n\n    return !!length &&\n        (isNumber(value as number) ||\n            (!isSymbol(value as string) && reIsUint.test(value as string))) &&\n        (Number(value) > -1 && Number(value) % 1 === 0 && Number(value) < length)\n}\n\n\nexport default isIndex","import { DATATYPE } from \"./types/common\"\n\nexport const checkType = <T>(value:T)  =>\n    Object.prototype.toString.call(value).slice(8, -1) as DATATYPE\n\nexport const isObject = <T>(value: T) => checkType(value) === DATATYPE.Object\nexport const isArray  = <T>(value: T) => checkType(value) === DATATYPE.Array\nexport const isNaN    = <T>(value: T) => checkType(value) === DATATYPE.NaN\nexport const isFunction = <T>(value: T) => checkType(value) === DATATYPE.Function\nexport const isNumber = <T>(value: T) => checkType(value) === DATATYPE.Number\nexport const isString = <T>(value: T) => checkType(value) === DATATYPE.String\nexport const isSymbol = <T>(value: T) => checkType(value) === DATATYPE.Symbol\nexport const isNull   = <T>(value: T) => checkType(value) === DATATYPE.Null\nexport const isUndefined   = <T>(value: T) => checkType(value) === DATATYPE.Undefined\n\nconst checkTypeInstance = {\n    isObject,\n    isArray,\n    isNaN,\n    isFunction,\n    checkType,\n    isString,\n    isNumber,\n    isSymbol,\n    isNull,\n    isUndefined\n}\nexport default checkTypeInstance\n\n"],"mappings":"yaAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GCEO,IAAMI,EAAgBC,GACzB,OAAO,UAAU,SAAS,KAAKA,CAAK,EAAE,MAAM,EAAG,EAAE,EAM9C,IAAMC,EAAeC,GAAaC,EAAUD,CAAK,IAAM,SAEvD,IAAME,EAAeC,GAAaC,EAAUD,CAAK,IAAM,SDR9D,IAAME,EAAmB,iBAGnBC,EAAW,mBAGjB,SAASC,EAA4CC,EAAUC,EAAkBJ,EAA4B,CAEzG,MAAO,CAAC,CAACI,IACJC,EAASF,CAAe,GACpB,CAACG,EAASH,CAAe,GAAKF,EAAS,KAAKE,CAAe,IAC/D,OAAOA,CAAK,EAAI,IAAM,OAAOA,CAAK,EAAI,IAAM,GAAK,OAAOA,CAAK,EAAIC,CAC1E,CAGA,IAAOG,EAAQL","names":["isIndex_exports","__export","isIndex_default","__toCommonJS","checkType","value","isNumber","value","checkType","isSymbol","value","checkType","MAX_SAFE_INTEGER","reIsUint","isIndex","value","length","isNumber","isSymbol","isIndex_default"]}