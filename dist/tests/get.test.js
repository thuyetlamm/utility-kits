"use strict";var C=Object.create;var d=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames,K=Object.getOwnPropertySymbols,E=Object.getPrototypeOf,h=Object.prototype.hasOwnProperty,M=Object.prototype.propertyIsEnumerable;var x=(e,t,r)=>t in e?d(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,l=(e,t)=>{for(var r in t||(t={}))h.call(t,r)&&x(e,r,t[r]);if(K)for(var r of K(t))M.call(t,r)&&x(e,r,t[r]);return e};var A=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of P(t))!h.call(e,o)&&o!==r&&d(e,o,{get:()=>t[o],enumerable:!(n=F(t,o))||n.enumerable});return e};var k=(e,t,r)=>(r=e!=null?C(E(e)):{},A(t||!e||!e.__esModule?d(r,"default",{value:e,enumerable:!0}):r,e));var I=(e,t,r)=>{if(!e||!t)return;let n=t.split("."),o=l({},e);for(let s of n)if(o=o==null?void 0:o[s],o===void 0)break;return o||r},a=I;var c=e=>Object.prototype.toString.call(e).slice(8,-1);var f=e=>c(e)==="Function";var u=e=>c(e)==="String";var p=require("react"),g=({children:e})=>{let t=null,r=null;return p.Children.forEach(e,n=>{(0,p.isValidElement)(n)&&(n.props.isTrue?n.props.isTrue&&!t&&(t=n):r=n)}),t||r};g.When=({children:e,isTrue:t})=>t&&e;g.Else=({children:e,render:t})=>t||e;var y=k(require("react"));var m=(e,t)=>{if(!f(e)||!f(t))throw new TypeError("Expected a function");let r=(...n)=>{let o=t?t.apply(null,n):n[0],s=r.cache;if(s.has(o))return s.get(o);let i=e.apply(null,n);return r.cache=s.set(o,i)||s,i};return r.cache=new(m.Cache||Map),r};m.Cache=Map;var V=m;var _=500,j=e=>{let t=V(e,(...r)=>{let{cache:n}=t;return(n==null?void 0:n.size)===_&&(n==null||n.clear()),r});return t},S=j;var U=46,W=/\\(\\)?/g,$=RegExp(`[^.[\\]]+|\\[(?:([^"'][^[]*)|(["'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))`,"g"),Se=S(e=>{let t=[];return u(e)&&((e==null?void 0:e.charCodeAt(0))===U&&t.push(""),e==null||e.replace($,(r,n,o,s)=>{var N;let i=r;o?i=(N=s==null?void 0:s.replace(W,"$1"))!=null?N:"":n&&(i=n.trim()),t.push(i)})),t});test("get one floor",()=>{let e=a({a:10},"a");expect(e).toBe(10)});test("is undifined",()=>{let e=a(void 0,"a");expect(e).toBe(void 0)});test("get function",()=>{let e=a({a:10,b:{z:1}},"b.z");expect(e).toBe(1)});test("get array",()=>{let e=a([{a:"name"}],"0.a");expect(e).toBe("name")});
//# sourceMappingURL=get.test.js.map