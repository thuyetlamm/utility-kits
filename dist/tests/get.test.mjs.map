{"version":3,"sources":["../../src/get.ts","../../src/tests/get.test.ts"],"sourcesContent":["import {NestedKeyOf, NestedKeyValue} from \"./types/get\";\n\n\nconst get = <T extends object, K extends NestedKeyOf<T>>(\n    obj: T,\n    key: K,\n    defaultValue?: NestedKeyValue<T, K>,\n): NestedKeyValue<T, K> => {\n    if (!obj || !key) return undefined as NestedKeyValue<T, K>\n\n    const keyParts = key.split(\".\") as Array<keyof T>\n    let value = { ...obj }\n\n    for (const part of keyParts) {\n        value = (value as Record<keyof T, T>)?.[part as keyof T]\n        if (value === undefined) {\n            break\n        }\n    }\n    return (value || defaultValue) as NestedKeyValue<T, K>\n}\n\nexport default get\n","import { get }  from \"../index\";\n\n\n\ntest('get one floor', () => {\n    const result = get({a :10}, \"a\");\n    expect(result).toBe(10);\n});\n\ntest('is undifined', () => {\n    const result = get(undefined!, \"a\");\n    expect(result).toBe(undefined);\n});\ntest('get function', () => {\n    const result = get({a :10, b :{z :1}}, \"b.z\");\n    expect(result).toBe(1);\n});"],"mappings":";;;;;;;;;;;;;;;;;;AAGA,IAAM,MAAM,CACR,KACA,KACA,iBACuB;AACvB,MAAI,CAAC,OAAO,CAAC,IAAK,QAAO;AAEzB,QAAM,WAAW,IAAI,MAAM,GAAG;AAC9B,MAAI,QAAQ,mBAAK;AAEjB,aAAW,QAAQ,UAAU;AACzB,YAAS,+BAA+B;AACxC,QAAI,UAAU,QAAW;AACrB;AAAA,IACJ;AAAA,EACJ;AACA,SAAQ,SAAS;AACrB;AAEA,IAAO,cAAQ;;;AClBf,KAAK,iBAAiB,MAAM;AACxB,QAAM,SAAS,YAAI,EAAC,GAAG,GAAE,GAAG,GAAG;AAC/B,SAAO,MAAM,EAAE,KAAK,EAAE;AAC1B,CAAC;AAED,KAAK,gBAAgB,MAAM;AACvB,QAAM,SAAS,YAAI,QAAY,GAAG;AAClC,SAAO,MAAM,EAAE,KAAK,MAAS;AACjC,CAAC;AACD,KAAK,gBAAgB,MAAM;AACvB,QAAM,SAAS,YAAI,EAAC,GAAG,IAAI,GAAG,EAAC,GAAG,EAAC,EAAC,GAAG,KAAK;AAC5C,SAAO,MAAM,EAAE,KAAK,CAAC;AACzB,CAAC;","names":[]}