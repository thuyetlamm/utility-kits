"use strict";var V=Object.create;var N=Object.defineProperty;var S=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,E=Object.prototype.hasOwnProperty;var F=(e,t,n,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of w(t))!E.call(e,o)&&o!==n&&N(e,o,{get:()=>t[o],enumerable:!(r=S(t,o))||r.enumerable});return e};var P=(e,t,n)=>(n=e!=null?V(C(e)):{},F(t||!e||!e.__esModule?N(n,"default",{value:e,enumerable:!0}):n,e));var u=e=>Object.prototype.toString.call(e).slice(8,-1);var l=e=>u(e)==="Array";var f=e=>u(e)==="Function";var p=e=>u(e)==="String";var A=e=>e?l(e)&&e instanceof Array?!e.length:p(e)&&e instanceof String?e.trim().length!==0:e instanceof Map||e instanceof Set?!e.size:!Object.keys(e!=null?e:{}).length:!0,s=A;var c=require("react"),x=({children:e})=>{let t=null,n=null;return c.Children.forEach(e,r=>{(0,c.isValidElement)(r)&&(r.props.isTrue?r.props.isTrue&&!t&&(t=r):n=r)}),t||n};x.When=({children:e,isTrue:t})=>t&&e;x.Else=({children:e,render:t})=>t||e;var d=P(require("react"));var y=(e,t)=>{if(!f(e)||!f(t))throw new TypeError("Expected a function");let n=(...r)=>{let o=t?t.apply(null,r):r[0],i=n.cache;if(i.has(o))return i.get(o);let a=e.apply(null,r);return n.cache=i.set(o,a)||i,a};return n.cache=new(y.Cache||Map),n};y.Cache=Map;var b=y;var B=500,j=e=>{let t=b(e,(...n)=>{let{cache:r}=t;return(r==null?void 0:r.size)===B&&(r==null||r.clear()),n});return t},g=j;var R=46,_=/\\(\\)?/g,z=RegExp(`[^.[\\]]+|\\[(?:([^"'][^[]*)|(["'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))`,"g"),ge=g(e=>{let t=[];return p(e)&&((e==null?void 0:e.charCodeAt(0))===R&&t.push(""),e==null||e.replace(z,(n,r,o,i)=>{var T;let a=n;o?a=(T=i==null?void 0:i.replace(_,"$1"))!=null?T:"":r&&(a=r.trim()),t.push(a)})),t});describe("isEmpty function",()=>{it("should return true for an empty string",()=>{expect(s("")).toBe(!0)}),it("should return true for an empty array",()=>{expect(s([])).toBe(!0)}),it("should return true for an empty object",()=>{expect(s({})).toBe(!0)}),it("should return false for a non-empty string",()=>{expect(s("hello")).toBe(!1)}),it("should return false for a non-empty array",()=>{expect(s([1,2,3])).toBe(!1)}),it("should return false for a non-empty object",()=>{expect(s({name:"John",age:30})).toBe(!1)}),it("should handle null and undefined values",()=>{expect(s(null)).toBe(!0),expect(s(void 0)).toBe(!0)})});
//# sourceMappingURL=isEmpty.test.js.map