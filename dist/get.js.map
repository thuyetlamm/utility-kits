{"version":3,"sources":["../src/get.ts"],"sourcesContent":["type NestedKeyOf<ObjectType extends object> = {\n    [Key in keyof ObjectType & (string | number)]: ObjectType[Key] extends object\n        ? `${Key}` | `${Key}.${NestedKeyOf<ObjectType[Key]>}`\n        : `${Key}`\n}[keyof ObjectType & (string | number)]\n\ntype NestedKeyValue<\n    T extends object,\n    Key,\n> = Key extends `${infer First}.${infer Rest}`\n    ? First extends keyof T\n        ? T[First] extends object\n            ? Rest extends NestedKeyOf<T[First]>\n                ? NestedKeyValue<T[First], Rest>\n                : never\n            : never\n        : never\n    : Key extends keyof T\n        ? T[Key]\n        : never\n\n const get = <T extends object, K extends NestedKeyOf<T>>(\n    obj: T,\n    key: K,\n    defaultValue?: NestedKeyValue<T, K>,\n): NestedKeyValue<T, K> => {\n    if (!obj || !key) return undefined as NestedKeyValue<T, K>\n\n    const keyParts = key.split(\".\") as Array<keyof T>\n    let value = { ...obj }\n\n    for (const part of keyParts) {\n        value = (value as Record<keyof T, T>)?.[part as keyof T]\n        if (value === undefined) {\n            break\n        }\n    }\n    return (value || defaultValue) as NestedKeyValue<T, K>\n}\n\nexport default get\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAqBC,IAAM,MAAM,CACT,KACA,KACA,iBACuB;AACvB,MAAI,CAAC,OAAO,CAAC,IAAK,QAAO;AAEzB,QAAM,WAAW,IAAI,MAAM,GAAG;AAC9B,MAAI,QAAQ,mBAAK;AAEjB,aAAW,QAAQ,UAAU;AACzB,YAAS,+BAA+B;AACxC,QAAI,UAAU,QAAW;AACrB;AAAA,IACJ;AAAA,EACJ;AACA,SAAQ,SAAS;AACrB;AAEA,IAAO,cAAQ;","names":[]}